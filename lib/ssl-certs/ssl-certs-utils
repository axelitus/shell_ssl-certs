#!/bin/bash
# ================================================================================
# SSL cert management script for Let's Encrypt - Utils
#
# author: Axel Pardemann (axelitus)
# ================================================================================
declare -r PREFIX_PATH=""

declare -r TRUE=0 # Set TRUE constant (shell convention is 0 for no errors)
declare -r FALSE=1 # Set FALSE constant (shell convention is non-zero for errors)
declare -r EXIT_CODE_OK=0 # Set default exit code ok
declare -r EXIT_CODE_ERROR=1 # Set default exit code error

declare -r CERTBOT_PATH="/opt/certbot" # The path to the certbot-auto executable
declare -r CERTBOT_SYMLINK="/usr/sbin/certbot-auto" # Set the path to the certbot symlink
declare -r CERTBOT_REPO="https://github.com/certbot/certbot" # Set the certbot repo address to clone
declare -r CERTBOT_STORAGE_PATH="/etc/letsencrypt" # Set the certbot storage path
declare -r CERTBOT_ARCHIVE_PATH="$CERTBOT_STORAGE_PATH/archive" # Set the certbot archive path
declare -r CERTBOT_LIVE_PATH="$CERTBOT_STORAGE_PATH/live" # Set the certbot live path
declare -r CERTBOT_FULLCHAIN_SUFFIX="fullchain" # Set the certbot fullchain suffix
declare -r CERTBOT_PRIVKEY_SUFFIX="privkey" # Set the certbot privkey suffix
declare -r CERTBOT_COMBINED_SUFFIX="combined" # Set the certbot combined suffix

declare -r CONFIG_PATH="$PREFIX_PATH/etc/ssl-certs" # Set the configuration folder path
declare -r CONFIG_HOOKS_PATH="$PREFIX_PATH/etc/ssl-certs/hooks.d" # Set the hook's folder path
declare -r CONFIG_CERT_PATH="$PREFIX_PATH/etc/ssl/domains" # Set the path where the certificates will be symlinked to
declare -r CONFIG_DOMAINS_PATH="$CONFIG_PATH/domains.d" # Set the individual domains config file path
declare -r CONFIG_FILE="$CONFIG_PATH/ssl-certs.ini" # Set the main configuration file path
declare -r CONFIG_HOOK_PRE_DOMAIN="$CONFIG_HOOKS_PATH/pre-domain" # Set the path for the pre-domain hook
declare -r CONFIG_HOOK_POST_DOMAIN="$CONFIG_HOOKS_PATH/post-domain" # Set the path for the post-domain hook

declare -r COLOR_RESET="\033[0m" # Set color reset code
declare -r COLOR_RED="\033[0;31m" # Set color red code
declare -r COLOR_GREEN="\033[0;32m" # Set color green code
declare -r COLOR_YELLOW="\033[0;33m" # Set color yellow code

# __certbot_exists()
# Verifies that certbot executable exists.
# Returns true if it exists, false otherwise.
# Echoes the path of the certbot executable.
__certbot_exists()
{
    local certbot

    certbot=$(which certbot-auto)
    if [[ -z "$certbot" ]]; then
        if [ -f "$CERTBOT_PATH/certbot-auto" ]; then
            certbot="$CERTBOT_PATH/certbot-auto"
            return $TRUE
        fi
        return $FALSE
    fi

    echo "$certbot"
    return $TRUE
}

# __certbot_or_fail(int exit code, string message)
# Verifies if certbot exists or script execution will fail.
# Echoes the path of the certbot executable.
__certbot_or_fail()
{
    local exit_code message
    exit_code=$1; message=$2

    if [[ -z "$exit_code" ]]; then
        exit_code=$EXIT_CODE_ERROR
    fi

    certbot=$(__certbot_exists)
    if [[ $? -eq $FALSE ]]; then
        echo "$message"
        exit $exit_code
    fi

    echo "$certbot"
    return $TRUE
}

# __concat_config_files($config1, $config2, ...)
# Concatenates the given config files
# Returns true un success, false otherwise.
# Echoes the resulting config files concatenation.
__concat_config_files()
{
    local args argc
    
    args=("$@")
    argc=${#args[@]}

    if [[ "$argc" -lt 2 ]]; then
        echo "[ERROR] Concatenation of config files requires at least 2 arguments, $argc given."
        exit $EXIT_CODE_ERROR
    fi

    for f in "${args[@]}"
    do
        if [[ ! -f "$f" ]]; then
            echo "[ERROR] The config file \"$f\" does not exist."
            return $FALSE
        fi
    done

    cat "${args[@]}"
    return $TRUE
}

# __echo_repeat(string str, int num)
# Returns always true.
# Echoes multiple times the given string.
__echo_repeat()
{
    local str num
    str=$1; num=$2

    if [[ -z "$str" ]]; then
        return $TRUE
    fi

    if [[ -z "$num" ]]; then
        num=1
    fi

    repeated=$(printf "%-${num}s" "$str")
    echo "${repeated// /$str}"
    return $TRUE
}

# __ensure_folder(string path, integer mode)
# Verifies if folder exists, if not then it creates it with the given mode (or default if non given).
# Returns true if nothing failed, false otherwise.
__ensure_folder()
{
    local path mode
    path=$1; mode=$2

    if [[ -z "$path" ]]; then
        return $FALSE;
    fi

    __folder_exists "$path"
    if [[ ! $? ]]; then
        mkdir -p "$path"
        if [[ ! $? ]]; then
            return $FALSE
        else
            if [[ -n "$mode" ]]; then
                chmod "$mode" "$path"
                if [[ ! $? ]]; then
                    return $FALSE;
                fi
            fi
        fi
    fi

    return $TRUE
}

# __folder_exists(string path)
# Returns true if the given folder exists (and is not a symlink), false otherwise.
__folder_exists()
{
    local path
    path=$1

    if [[ -z "$path" ]]; then
        return $FALSE;
    fi

    if [[ -d "$path" && ! -L "$path" ]]; then
        return $TRUE
    else
        return $FALSE
    fi
}
