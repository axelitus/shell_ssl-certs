#!/bin/bash
# ================================================================================
# SSL cert management script for Let's Encrypt - Script
#
# author: Axel Pardemann (axelitus)
# inspired-by: https://gist.github.com/thisismitch/7c91e9b2b63f837a0c4b
# ================================================================================
declare -r VERSION="0.1-alpha" # Sets the script's version following SemVer convention
declare -r SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" # Set the path where this script is installed
declare -r UTILS_PATH="$SCRIPT_PATH/../lib/ssl-certs-utils" # Load utils scripts

# Load utils script
if [ -f "$UTILS_PATH" ]; then
    source "$UTILS_PATH"
else
    echo "[ERROR] Cannot found \"$UTILS_PATH\" utils library."
    exit 1
fi


# ========== begin: main ==========

__ssl-certs()
{
    local args action

    args=($@)
    action=${args[0]}
    case "$action" in
        "certbot")
            __ssl-certs_certbot "${args[@]:1}"
            ;;
        "help" | "-h" | "-?")
            __ssl-certs_help
            ;;
        "get")
            __ssl-certs_get
            ;;
        "renew")
            __ssl-certs_renew
            ;;
        "revoke")
            __ssl-certs_revoke
            ;;
        "version")
            __ssl-certs_version
            ;;
        *)
            __ssl-certs_help
            ;;
    esac
}

# ========== end: main ==========


# ========== begin: certbot ==========

__ssl-certs_certbot()
{
    local args action

    args=($@)
    action=${args[0]}
    case "$action" in
        "help" | "-h" | "-?")
            __ssl-certs_certbot_help
            ;;
        "install")
            __ssl-certs_certbot_install "${args[@]:1}"
            ;;
        "remove")
            __ssl-certs_certbot_remove
            ;;
        "update")
            __ssl-certs_certbot_update "${args[@]:1}"
            ;;
        *)
            __ssl-certs_certbot_help
            ;;
    esac
}

# ---------- begin: certbot help ----------
__ssl-certs_certbot_help()
{
    echo
    __ssl-certs_version
    echo
    echo -e "${COLOR_YELLOW}Usage:${COLOR_RESET}"
    echo -e "  ${COLOR_GREEN}ssl-certs certbot${COLOR_RESET} command"
    echo
    echo -e "${COLOR_YELLOW}Available commands:${COLOR_RESET}"

    __ssl-certs_certbot_help_commands
    for ((i=0; i<=${#commands[@]}; i+=2)) do
        cmd_str="$cmd_str  ${COLOR_GREEN}${commands[i]}${COLOR_RESET}\t${commands[i+1]}\n"
    done
    echo -e "$cmd_str" | column -t -s $'\t'
}

__ssl-certs_certbot_help_commands()
{
    commands=( \
        "install" "Installs Let's Encrypt certbot." \
        "remove" "Removes Let's Encrypt certbot." \
        "update" "Updates Let's Encrypt certbot to the latest published version." \
    )
}
# ---------- begin: certbot help ----------

# ---------- begin: certbot install ----------
__ssl-certs_certbot_install()
{
    local no_deps extra_options
    no_deps=$FALSE
    extra_options=""

    while [[ $# -gt 0 ]] && [[ ."$1" = .--* ]]
    do
        option="$1" && shift
        case "$option" in
            "--no-deps")
                no_deps=$TRUE
                ;;
            "--noninteractive")
                extra_options="$extra_options --noninteractive"
                ;;
        esac
    done

    __certbot_exists
    if [ $? -eq $TRUE ]; then
        if [ ! -L "$CERTBOT_SYMLINK" ]; then
            ln -s "$CERTBOT_PATH/certbot-auto" "$CERTBOT_SYMLINK" &>/dev/null
        fi
        __certbot_exists
        echo "[INFO] Certbot is already installed and can be execute using \"$certbot\" command."
        exit $EXIT_CODE_OK
    fi

    if [ -d "$CERTBOT_PATH" ]; then
        echo "[ERROR] The folder \"$CERTBOT_PATH\" already exists. Please remove it and try again."
        exit $EXIT_CODE_ERROR
    fi

    echo "[INFO] Certbot will be installed in $CERTBOT_PATH and a symlink will be created in \"/usr/bin\" folder..."
    git=$(which git)
    if [ -z "$git" ]; then
        "[ERROR] Git is not installed. Please install it before running this command again."
        exit $EXIT_CODE_ERROR
    fi

    git clone "$CERTBOT_REPO" "$CERTBOT_PATH"
    if [ ! -f "$CERTBOT_PATH/certbot-auto" ]; then
        echo "[ERROR] Could not install certbot. Please try again."
        exit $EXIT_CODE_ERROR
    fi

    ln -s "$CERTBOT_PATH/certbot-auto" "$CERTBOT_SYMLINK" &>/dev/null
    if [ ! -L "$CERTBOT_SYMLINK" ]; then
        "[ERROR] Could not symlink certbot-auto but it was correctly installed in \"$CERTBOT_PATH\" folder."
        exit $EXIT_CODE_ERROR
    fi

    if [ $no_deps -eq $FALSE ]; then
        __certbot_exists
        echo "Installing certbot dependencies..."
        $certbot --os-packages-only $extra_options
        echo "Certbot dependencies installed."
    else
        echo "[INFO] Skipping dependencies installation."
    fi

    echo "[INFO] Certbot was correctly installed. You can use it with \"certbot-auto\" command."
}
# ---------- end: certbot install ----------

# ---------- begin: certbot remove ----------
__ssl-certs_certbot_remove()
{
    __certbot_or_fail $EXIT_CODE_OK "[INFO] Certbot is currently not installed."

    if [ -L "$CERTBOT_SYMLINK" ]; then
        echo "[INFO] Removing certbot symlink..."
        rm "$CERTBOT_SYMLINK" &>/dev/null
        if [ ! $? -eq $EXIT_CODE_OK ]; then
            echo "[ERROR] Could not remove certbot-auto symlink."
            exit $EXIT_CODE_ERROR
        else
            echo "[INFO] Certbot symlink removed."
        fi
    fi

    echo "[INFO] Certbot will be remove from \"$CERTBOT_PATH\"..."
    rm -rf "$CERTBOT_PATH" &>/dev/null
    if [ -d "$CERTBOT_PATH" ]; then
        echo "[ERROR] Could not remove certbot folder. Please try again."
        exit $EXIT_CODE_ERROR
    else
        echo "[INFO] Certbot application removed."
    fi

    echo "[INFO] Certbot was correctly removed."
}
# ---------- end: certbot remove ----------

# ---------- begin: certbot update ----------
__ssl-certs_certbot_update()
{
    local no_deps extra_options
    no_deps=$FALSE
    extra_options=""

    while [[ $# -gt 0 ]] && [[ ."$1" = .--* ]]
    do
        option="$1" && shift
        case "$option" in
            "--no-deps")
                no_deps=$TRUE
                ;;
            "--noninteractive")
                extra_options="$extra_options --noninteractive"
                ;;
        esac
    done

    __certbot_or_fail $EXIT_CODE_OK "[INFO] Certbot is currently not installed."

    (cd "$CERTBOT_PATH" && git pull)

    if [ $no_deps -eq $FALSE ]; then
        echo "Updating certbot dependencies..."
        $certbot --os-packages-only $extra_options
        echo "Certbot dependencies updated."
    fi
}
# ---------- end: certbot update ----------

# ========== end: certbot ==========


# ========== begin: help ==========

__ssl-certs_help()
{
    echo
    __ssl-certs_version
    echo
    echo -e "${COLOR_YELLOW}Usage:${COLOR_RESET}"
    echo -e "  ${COLOR_GREEN}ssl-certs${COLOR_RESET} command [sub-command]"
    echo
    echo -e "${COLOR_YELLOW}Available commands:${COLOR_RESET}"

    __ssl-certs_help_commands
    for ((i=0; i<=${#commands[@]}; i+=2)) do
        cmd_str="$cmd_str  ${COLOR_GREEN}${commands[i]}${COLOR_RESET}\t${commands[i+1]}\n"
    done
    echo -e "$cmd_str" | column -t -s $'\t'
}

__ssl-certs_help_commands()
{
    commands=( \
        "certbot" "Manages Let's Encrypt certbot." \
        "help" "Displays help for this application." \
        "get" "Gets new certificates for domains from Let's Encrypt." \
        "renew" "Renews existing Let's Encrypt issued certificates." \
        "revoke" "Revokes existing Let's Encrypt issued certificates." \
        "version" "Displays this application version." \
    )
}

# ========== end: help ==========


# ========== begin: get ==========

__ssl-certs_get()
{
    echo "ssl-certs get"
}

# ========== end: get ==========


# ========== begin: renew ==========

__ssl-certs_renew()
{
    echo "ssl-certs renew"
}

# ========== begin: renew ==========


# ========== begin: revoke ==========

__ssl-certs_revoke()
{
    echo "ssl-certs revoke"
}

# ========== end: revoke ==========


# ========== begin: version ==========

__ssl-certs_version()
{
    echo "ssl-certs version $VERSION"
}

# ========== end: version ==========


# ********** begin: entry point **********
__ssl-certs "$@"
# ********** end: entry point **********
